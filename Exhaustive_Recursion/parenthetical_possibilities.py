"""Write a function, parenthetical_possibilities, that takes in a string as an argument. The function should return an array containing all of the strings that could be generated by expanding all parentheses of the string into its possibilities.

For example, the possibilities for 'x(mn)yz' are 'xmyz', 'xnyz'."""

def parenthetical_possibilities(s):
  if len(s) == 0:
    return [""]

  possibilities = []
  choices, remainder = get_choices(s)
  for choice in choices:
    results = parenthetical_possibilities(remainder)
    for result in results:
      possibilities.append(choice + result)
  return possibilities


def get_choices(s):
  if s[0] == "(":
    end_index = s.index(")")
    choices = s[1:end_index]
    remainder = s[end_index + 1:]
    return (choices, remainder)
  else:
    return (s[0], s[1:])


parenthetical_possibilities('x(mn)yz') # -> 
# [ 'xmyz', 'xnyz' ]


parenthetical_possibilities("(qr)ab(stu)c") # ->
# [ 'qabsc', 'qabtc', 'qabuc', 'rabsc', 'rabtc', 'rabuc' ]


parenthetical_possibilities("taco") # ->
# ['taco']


parenthetical_possibilities("") # ->
# ['']


parenthetical_possibilities("(etc)(blvd)(cat)") # ->
# [
#  'ebc', 'eba', 'ebt', 'elc', 'ela',
#  'elt', 'evc', 'eva', 'evt', 'edc',
#  'eda', 'edt', 'tbc', 'tba', 'tbt',
#  'tlc', 'tla', 'tlt', 'tvc', 'tva',
#  'tvt', 'tdc', 'tda', 'tdt', 'cbc',
#  'cba', 'cbt', 'clc', 'cla', 'clt',
#  'cvc', 'cva', 'cvt', 'cdc', 'cda',
#  'cdt'
# ]
